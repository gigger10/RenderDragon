name: Patch Minecraft with mtbinloader2

on:
  workflow_dispatch:
    inputs:
      mcversion_path:
        description: "Path to mcversion.txt"
        default: "mcversion.txt"
        required: true
        type: string
      package_name:
        description: "Optional package name override (e.g., com.example.mcpatched)"
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      url32: ${{ steps.parse.outputs.url32 }}
      url64: ${{ steps.parse.outputs.url64 }}
      do32: ${{ steps.parse.outputs.do32 }}
      do64: ${{ steps.parse.outputs.do64 }}
      package_name: ${{ steps.pkgn.outputs.package_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse mcversion.txt
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ inputs.mcversion_path }}"
          if [[ ! -f "$FILE" ]]; then
            echo "mcversion.txt not found at: $FILE" >&2
            exit 1
          fi
          url32=""
          url64=""
          while IFS= read -r line; do
            line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -qiE '^32[[:space:]]*:'; then
              url32="$(echo "$line" | cut -d: -f2- | xargs)"
            elif echo "$line" | grep -qiE '^64[[:space:]]*:'; then
              url64="$(echo "$line" | cut -d: -f2- | xargs)"
            fi
          done < "$FILE"
          echo "url32=$url32" >> "$GITHUB_OUTPUT"
          echo "url64=$url64" >> "$GITHUB_OUTPUT"
          echo "do32=$([[ -n "$url32" ]] && echo true || echo false)" >> "$GITHUB_OUTPUT"
          echo "do64=$([[ -n "$url64" ]] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Normalize package name input
        id: pkgn
        run: |
          echo "package_name=${{ inputs.package_name }}" >> "$GITHUB_OUTPUT"

  patch:
    needs: prepare
    if: ${{ needs.prepare.outputs.do32 == 'true' || needs.prepare.outputs.do64 == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - archlabel: "32"
            abi: "armeabi-v7a"
            addneeded: "libmtbinloader2_armv7-linux-androideabi.so"
            mtb_asset: "libmtbinloader2_armv7-linux-androideabi.so"
            url: ${{ needs.prepare.outputs.url32 }}
            do: ${{ needs.prepare.outputs.do32 }}
          - archlabel: "64"
            abi: "arm64-v8a"
            addneeded: "libmtbinloader2_aarch64-linux-android.so"
            mtb_asset: "libmtbinloader2_aarch64-linux-android.so"
            url: ${{ needs.prepare.outputs.url64 }}
            do: ${{ needs.prepare.outputs.do64 }}

    steps:
      - name: Skip if this arch not requested
        if: ${{ matrix.do != 'true' }}
        run: echo "Skipping ${{ matrix.archlabel }}-bit (no URL)."

      - name: Checkout
        if: ${{ matrix.do == 'true' }}
        uses: actions/checkout@v4

      - name: Set up Java
        if: ${{ matrix.do == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install tools
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip zip curl xxd patchelf openjdk-17-jdk
          mkdir -p mtb
          curl -L "https://github.com/mcbegamerxx954/mtbinloader2/releases/download/v0.1.9-beta/${{ matrix.mtb_asset }}" -o "mtb/${{ matrix.mtb_asset }}"
          curl -L "https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar" -o uber.jar
          curl -L "https://github.com/iBotPeaches/Apktool/releases/download/v2.12.0/apktool_2.12.0.jar" -o apktool.jar

      - name: Download APK
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p work/${{ matrix.archlabel }}
          cd work/${{ matrix.archlabel }}
          curl -L "${{ matrix.url }}" -o input.apk

      - name: Unpack APK
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          cd work/${{ matrix.archlabel }}
          mkdir -p apk
          unzip -q input.apk -d apk
          if [[ ! -f "apk/lib/${{ matrix.abi }}/libminecraftpe.so" ]]; then
            echo "libminecraftpe.so not found!" >&2
            exit 1
          fi
          cp "apk/lib/${{ matrix.abi }}/libminecraftpe.so" libminecraftpe.so

      - name: Patch libminecraftpe.so
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          cd work/${{ matrix.archlabel }}
          patchelf --add-needed "${{ matrix.addneeded }}" libminecraftpe.so
          install -m 0644 libminecraftpe.so "apk/lib/${{ matrix.abi }}/libminecraftpe.so"
          install -m 0644 "../../mtb/${{ matrix.mtb_asset }}" "apk/lib/${{ matrix.abi }}/${{ matrix.mtb_asset }}"

      - name: Rebuild unsigned APK
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          cd work/${{ matrix.archlabel }}/apk
          zip -qr ../unsigned.apk .

      - name: Optionally rename package
        if: ${{ matrix.do == 'true' && needs.prepare.outputs.package_name != '' }}
        shell: bash
        env:
          PKG: ${{ needs.prepare.outputs.package_name }}
        run: |
          set -euo pipefail
          cd work/${{ matrix.archlabel }}
          rm -rf decoded
          java -jar ../../apktool.jar d unsigned.apk -o decoded -f
          if grep -q '^renameManifestPackage:' decoded/apktool.yml; then
            sed -i 's|^renameManifestPackage:.*|renameManifestPackage: '"$PKG"'|' decoded/apktool.yml
          else
            echo "renameManifestPackage: $PKG" >> decoded/apktool.yml
          fi
          java -jar ../../apktool.jar b decoded -o rebuilt.apk
          mv rebuilt.apk unsigned.apk

      - name: Sign APK (import keystore from secrets)
        if: ${{ matrix.do == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p keystore

          if [[ -z "${{ secrets.KEYSTORE_BASE64 }}" ]]; then
            echo "ERROR: KEYSTORE_BASE64 secret is missing!"
            exit 1
          fi

          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore/keystore.jks

          KS_PATH="keystore/keystore.jks"
          KS_ALIAS="${{ secrets.KEYSTORE_ALIAS }}"
          KS_STOREPASS="${{ secrets.KEYSTORE_STOREPASS }}"
          KS_KEYPASS="${{ secrets.KEYSTORE_KEYPASS }}"

          if [[ ! -f "$KS_PATH" ]]; then
            echo "ERROR: Keystore file not found at $KS_PATH"
            exit 1
          fi

          echo "Signing with keystore: $KS_PATH, alias: $KS_ALIAS"
          ls -l "$KS_PATH"

          cd work/${{ matrix.archlabel }}
          mkdir -p signed
          java -jar ../../uber.jar -a unsigned.apk \
            --ks "$KS_PATH" --ksAlias "$KS_ALIAS" \
            --ksPass "$KS_STOREPASS" --keyPass "$KS_KEYPASS" \
            --allowResign \
            --out signed

          cd signed
          SIGNED_APK=$(ls signed/*.apk | head -n1)
          mv "$SIGNED_APK" "minecraft-rd-1.21.100-${{ matrix.archlabel }}.apk"

      - name: Upload artifact
        if: ${{ matrix.do == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: minecraft-rd-1.21.100-${{ matrix.archlabel }}
          path: work/${{ matrix.archlabel }}/minecraft-rd-1.21.100-${{ matrix.archlabel }}.apk
          if-no-files-found: error
